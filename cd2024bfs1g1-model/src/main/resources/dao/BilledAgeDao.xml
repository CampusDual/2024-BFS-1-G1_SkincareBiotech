<?xml version="1.0" encoding="UTF-8"?>
<JdbcEntitySetup
        xmlns="http://www.ontimize.com/schema/jdbc"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd"
        catalog="" schema="${mainschema}" table="gra_billed_age"
        datasource="mainDataSource" sqlhandler="dbSQLStatementHandler">
    <DeleteKeys>
        <Column>GBA_ID</Column>
    </DeleteKeys>
    <UpdateKeys>
        <Column>GBA_ID</Column>
    </UpdateKeys>
    <GeneratedKey>gba_id</GeneratedKey>
    <Queries>
        <Query id="default">
            <Sentence>
                <![CDATA[
                    SELECT
                        #COLUMNS#
                    FROM
                        ${mainschema}.gra_billed_age
                    #WHERE#
                    ORDER BY GBA_MIN_AGE, GBA_MAX_AGE
                ]]>
            </Sentence>
        </Query>
        <Query id="billed_age">
            <AmbiguousColumns>
                <AmbiguousColumn name="ORD_ID" prefix="O"/>
            </AmbiguousColumns>
            <Sentence>
                <![CDATA[
                    WITH price_age AS (
                        SELECT
                            ROUND(SUM(OL.OL_PRICE * OL.OL_UNITS)::numeric, 2) AS TOTAL_PRICE,
                            DATE_PART('year', AGE(O.ORD_DATE, UP.UPR_BIRTHDATE)) AS AGE,
                            UP.UGE_ID
                        FROM
                            ${mainschema}.ORDERS AS O
                            JOIN ${mainschema}.ORD_LINES AS OL ON O.ORD_ID = OL.ORD_ID
                            JOIN ${mainschema}.USR_PROFILE AS UP ON O.ORD_CLIENT_ID = UP.USR_ID
                        WHERE
                            O.ORD_PAID = true
                        GROUP BY
                            DATE_PART('year', AGE(O.ORD_DATE, UP.UPR_BIRTHDATE)), UP.UGE_ID
                    ),
                    age_ranges AS (
                        SELECT
                            GBA.GBA_ID,
                            CONCAT_WS(' - ', GBA.GBA_MIN_AGE, GBA.GBA_MAX_AGE) AS AGE_RANGE,
                            SUM(CASE WHEN price_age.UGE_ID = 1 THEN price_age.TOTAL_PRICE ELSE 0 END) AS MAN,
                            SUM(CASE WHEN price_age.UGE_ID = 2 THEN price_age.TOTAL_PRICE ELSE 0 END) AS WOMAN,
                            SUM(CASE WHEN price_age.UGE_ID = 3 THEN price_age.TOTAL_PRICE ELSE 0 END ) AS OTHER,
                            SUM(CASE WHEN price_age.UGE_ID = 4 THEN price_age.TOTAL_PRICE ELSE 0 END) AS PNA,
                            GBA.GBA_MIN_AGE,
                            GBA.GBA_MAX_AGE
                        FROM
                            ${mainschema}.GRA_BILLED_AGE AS GBA
                            LEFT JOIN price_age ON price_age.AGE BETWEEN GBA.GBA_MIN_AGE AND GBA.GBA_MAX_AGE
                        GROUP BY
                            GBA.GBA_ID, GBA.GBA_MIN_AGE, GBA.GBA_MAX_AGE
                    )
                    SELECT
                        #COLUMNS#
                    FROM
                        age_ranges
                    #WHERE#
                    ORDER BY
                        GBA_MIN_AGE
                ]]>
            </Sentence>
        </Query>
        <Query id="total_price">
            <Sentence>
                <![CDATA[

                    WITH price_age AS (
                        SELECT ROUND(SUM(OL_PRICE * OL_UNITS):: numeric, 2) AS TOTAL_PRICE , DATE_PART('year', AGE(ORD_DATE, UPR_BIRTHDATE)) as AGE
                        FROM ${mainschema}.ORDERS AS O
                        JOIN ${mainschema}.ORD_LINES AS OL ON O.ORD_ID = OL.ORD_ID
                        JOIN ${mainschema}.USR_PROFILE AS UP ON O.ORD_CLIENT_ID = UP.USR_ID
                        WHERE O.ORD_PAID = true
                        GROUP BY AGE
                    ),
                    age_ranges AS(
                        SELECT GBA.*, CONCAT_WS(' - ',GBA_MIN_AGE,GBA_MAX_AGE) AS AGE_RANGE, coalesce(sum(price_age.total_price),0) AS TOTAL
                        FROM ${mainschema}.GRA_BILLED_AGE AS GBA
                        LEFT JOIN price_age on price_age.age BETWEEN GBA_MIN_AGE and GBA_MAX_AGE
                        GROUP BY GBA_ID
                    )
                    SELECT #COLUMNS#
                    FROM age_ranges
                    #WHERE#
                    ORDER BY GBA_MIN_AGE
                    ]]>
            </Sentence>
        </Query>
        <Query id="user_count_by_gender_and_age">
            <AmbiguousColumns>
                <AmbiguousColumn name="USR_ID" prefix="U"/>
            </AmbiguousColumns>
            <Sentence>
                <![CDATA[
                    WITH user_ages AS (
                        SELECT
                            u.usr_id,
                            g.uge_name AS gender,
                            DATE_PART('year', AGE(CURRENT_DATE, p.upr_birthdate)) AS age
                        FROM
                            ${mainschema}.usr_user u
                        INNER JOIN
                            ${mainschema}.usr_profile p ON u.usr_id = p.usr_id
                        INNER JOIN
                            ${mainschema}.usr_gender g ON p.uge_id = g.uge_id
                    ),
                    age_ranges AS (
                        SELECT
                            gba.*,
                            CONCAT_WS(' - ', gba_min_age, gba_max_age) AS age_range
                        FROM
                            ${mainschema}.gra_billed_age gba
                    ),
                    gender_combinations AS (
                        SELECT DISTINCT g.uge_name AS gender
                        FROM ${mainschema}.usr_gender g
                    )
                    SELECT
                        gc.gender,
                        ar.age_range,
                        COALESCE(COUNT(ua.usr_id), 0) AS user_count
                    FROM
                        age_ranges ar
                    CROSS JOIN
                        gender_combinations gc
                    LEFT JOIN
                        user_ages ua ON ua.age BETWEEN ar.gba_min_age AND ar.gba_max_age AND ua.gender = gc.gender
                    GROUP BY
                        gc.gender, ar.age_range, ar.gba_min_age
                    #WHERE#
                    ORDER BY
                        gc.gender, ar.gba_min_age
                ]]>
            </Sentence>
        </Query>
        <Query id="user_count_by_gender_age_skin">
            <AmbiguousColumns>
                <AmbiguousColumn name="USR_ID" prefix="U"/>
            </AmbiguousColumns>
            <Sentence>
                <![CDATA[
                    WITH user_ages AS (
                        SELECT
                            u.usr_id,
                            g.uge_name AS gender,
                            DATE_PART('year', AGE(CURRENT_DATE, p.upr_birthdate)) AS age,
                            s.skin_name AS skin_type
                        FROM
                            usr_user u
                        INNER JOIN
                            usr_profile p ON u.usr_id = p.usr_id
                        INNER JOIN
                            usr_gender g ON p.uge_id = g.uge_id
                        INNER JOIN
                            skin_types s ON p.skin_id = s.skin_id
                    ),
                    age_ranges AS (
                        SELECT
                            gba.*,
                            CONCAT_WS(' - ', gba_min_age, gba_max_age) AS age_range
                        FROM
                            gra_billed_age gba
                    ),
                    gender_combinations AS (
                        SELECT DISTINCT g.uge_name AS gender
                        FROM usr_gender g
                    ),
                    skin_combinations AS (
                        SELECT DISTINCT s.skin_name AS skin_type
                        FROM skin_types s
                    )
                    SELECT
                        gc.gender,
                        ar.age_range,
                        sc.skin_type,
                        COALESCE(COUNT(ua.usr_id), 0) AS user_count
                    FROM
                        age_ranges ar
                    CROSS JOIN
                        gender_combinations gc
                    CROSS JOIN
                        skin_combinations sc
                    LEFT JOIN
                        user_ages ua ON ua.age BETWEEN ar.gba_min_age AND ar.gba_max_age
                                    AND ua.gender = gc.gender
                                    AND ua.skin_type = sc.skin_type
                    GROUP BY
                        gc.gender, ar.age_range, sc.skin_type, ar.gba_min_age
                    #WHERE#
                    ORDER BY
                        gc.gender, ar.gba_min_age, sc.skin_type
                ]]>
            </Sentence>
        </Query>
    </Queries>
</JdbcEntitySetup>